#nullable enable
Alpaca.Markets.Extensions.AlpacaCryptoStreamingClientExtensions
Alpaca.Markets.Extensions.AlpacaDataClientExtensions
Alpaca.Markets.Extensions.AlpacaDataStreamingClientExtensions
Alpaca.Markets.Extensions.AlpacaDataSubscriptionExtensions
Alpaca.Markets.Extensions.AlpacaNewsStreamingClientExtensions
Alpaca.Markets.Extensions.AlpacaServiceCollectionExtensions
Alpaca.Markets.Extensions.AlpacaStreamingClientExtensions
Alpaca.Markets.Extensions.AlpacaTradingClientExtensions
Alpaca.Markets.Extensions.AlpacaValueTask
Alpaca.Markets.Extensions.AlpacaValueTask.AlpacaValueTask() -> void
Alpaca.Markets.Extensions.AlpacaValueTask.GetAwaiter() -> System.Runtime.CompilerServices.ValueTaskAwaiter
Alpaca.Markets.Extensions.AlpacaValueTask.WithCancellation(System.Threading.CancellationToken cancellationToken) -> Alpaca.Markets.Extensions.AlpacaValueTask
Alpaca.Markets.Extensions.Bracket
Alpaca.Markets.Extensions.CalendarExtensions
Alpaca.Markets.Extensions.EnvironmentExtensions
Alpaca.Markets.Extensions.EnumerableExtensions
Alpaca.Markets.Extensions.HistoricalBarsClientExtensions
Alpaca.Markets.Extensions.HistoricalQuotesClientExtensions
Alpaca.Markets.Extensions.HistoricalTradesClientExtensions
Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<TItem>
Alpaca.Markets.Extensions.OrderSideExtensions
Alpaca.Markets.Extensions.ReconnectionParameters
Alpaca.Markets.Extensions.ReconnectionParameters.MaxReconnectionAttempts.get -> int
Alpaca.Markets.Extensions.ReconnectionParameters.MaxReconnectionAttempts.set -> void
Alpaca.Markets.Extensions.ReconnectionParameters.MaxReconnectionDelay.get -> System.TimeSpan
Alpaca.Markets.Extensions.ReconnectionParameters.MaxReconnectionDelay.set -> void
Alpaca.Markets.Extensions.ReconnectionParameters.MinReconnectionDelay.get -> System.TimeSpan
Alpaca.Markets.Extensions.ReconnectionParameters.MinReconnectionDelay.set -> void
Alpaca.Markets.Extensions.ReconnectionParameters.ReconnectionParameters() -> void
Alpaca.Markets.Extensions.StreamingClientExtensions
Alpaca.Markets.Extensions.StreamingDataClientExtensions
static Alpaca.Markets.Extensions.AlpacaCryptoStreamingClientExtensions.GetOrderBookSubscription(this Alpaca.Markets.IAlpacaCryptoStreamingClient! client, params string![]! symbols) -> Alpaca.Markets.IAlpacaDataSubscription<Alpaca.Markets.IOrderBook!>!
static Alpaca.Markets.Extensions.AlpacaCryptoStreamingClientExtensions.GetOrderBookSubscription(this Alpaca.Markets.IAlpacaCryptoStreamingClient! client, System.Collections.Generic.IEnumerable<string!>! symbols) -> Alpaca.Markets.IAlpacaDataSubscription<Alpaca.Markets.IOrderBook!>!
static Alpaca.Markets.Extensions.AlpacaCryptoStreamingClientExtensions.SubscribeOrderBookAsync(this Alpaca.Markets.IAlpacaCryptoStreamingClient! client, params string![]! symbols) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.IOrderBook!>!>
static Alpaca.Markets.Extensions.AlpacaCryptoStreamingClientExtensions.SubscribeOrderBookAsync(this Alpaca.Markets.IAlpacaCryptoStreamingClient! client, string! symbol) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.IOrderBook!>!>
static Alpaca.Markets.Extensions.AlpacaCryptoStreamingClientExtensions.SubscribeOrderBookAsync(this Alpaca.Markets.IAlpacaCryptoStreamingClient! client, System.Collections.Generic.IEnumerable<string!>! symbols) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.IOrderBook!>!>
static Alpaca.Markets.Extensions.AlpacaCryptoStreamingClientExtensions.WithReconnect(this Alpaca.Markets.IAlpacaCryptoStreamingClient! client) -> Alpaca.Markets.IAlpacaCryptoStreamingClient!
static Alpaca.Markets.Extensions.AlpacaCryptoStreamingClientExtensions.WithReconnect(this Alpaca.Markets.IAlpacaCryptoStreamingClient! client, Alpaca.Markets.Extensions.ReconnectionParameters! parameters) -> Alpaca.Markets.IAlpacaCryptoStreamingClient!
static Alpaca.Markets.Extensions.AlpacaDataClientExtensions.GetNewsArticlesAsAsyncEnumerable(this Alpaca.Markets.IAlpacaDataClient! client, Alpaca.Markets.NewsArticlesRequest! request) -> System.Collections.Generic.IAsyncEnumerable<Alpaca.Markets.INewsArticle!>!
static Alpaca.Markets.Extensions.AlpacaDataClientExtensions.GetNewsArticlesAsAsyncEnumerable(this Alpaca.Markets.IAlpacaDataClient! client, Alpaca.Markets.NewsArticlesRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<Alpaca.Markets.INewsArticle!>!
static Alpaca.Markets.Extensions.AlpacaDataClientExtensions.GetNewsArticlesPagesAsAsyncEnumerable(this Alpaca.Markets.IAlpacaDataClient! client, Alpaca.Markets.NewsArticlesRequest! request) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyList<Alpaca.Markets.INewsArticle!>!>!
static Alpaca.Markets.Extensions.AlpacaDataClientExtensions.GetNewsArticlesPagesAsAsyncEnumerable(this Alpaca.Markets.IAlpacaDataClient! client, Alpaca.Markets.NewsArticlesRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyList<Alpaca.Markets.INewsArticle!>!>!
static Alpaca.Markets.Extensions.AlpacaDataStreamingClientExtensions.GetCancellationSubscription(this Alpaca.Markets.IAlpacaDataStreamingClient! client, params string![]! symbols) -> Alpaca.Markets.IAlpacaDataSubscription<Alpaca.Markets.ITrade!>!
static Alpaca.Markets.Extensions.AlpacaDataStreamingClientExtensions.GetCancellationSubscription(this Alpaca.Markets.IAlpacaDataStreamingClient! client, System.Collections.Generic.IEnumerable<string!>! symbols) -> Alpaca.Markets.IAlpacaDataSubscription<Alpaca.Markets.ITrade!>!
static Alpaca.Markets.Extensions.AlpacaDataStreamingClientExtensions.GetCorrectionSubscription(this Alpaca.Markets.IAlpacaDataStreamingClient! client, params string![]! symbols) -> Alpaca.Markets.IAlpacaDataSubscription<Alpaca.Markets.ICorrection!>!
static Alpaca.Markets.Extensions.AlpacaDataStreamingClientExtensions.GetCorrectionSubscription(this Alpaca.Markets.IAlpacaDataStreamingClient! client, System.Collections.Generic.IEnumerable<string!>! symbols) -> Alpaca.Markets.IAlpacaDataSubscription<Alpaca.Markets.ICorrection!>!
static Alpaca.Markets.Extensions.AlpacaDataStreamingClientExtensions.GetLimitUpLimitDownSubscription(this Alpaca.Markets.IAlpacaDataStreamingClient! client, params string![]! symbols) -> Alpaca.Markets.IAlpacaDataSubscription<Alpaca.Markets.ILimitUpLimitDown!>!
static Alpaca.Markets.Extensions.AlpacaDataStreamingClientExtensions.GetLimitUpLimitDownSubscription(this Alpaca.Markets.IAlpacaDataStreamingClient! client, System.Collections.Generic.IEnumerable<string!>! symbols) -> Alpaca.Markets.IAlpacaDataSubscription<Alpaca.Markets.ILimitUpLimitDown!>!
static Alpaca.Markets.Extensions.AlpacaDataStreamingClientExtensions.GetStatusSubscription(this Alpaca.Markets.IAlpacaDataStreamingClient! client, params string![]! symbols) -> Alpaca.Markets.IAlpacaDataSubscription<Alpaca.Markets.IStatus!>!
static Alpaca.Markets.Extensions.AlpacaDataStreamingClientExtensions.GetStatusSubscription(this Alpaca.Markets.IAlpacaDataStreamingClient! client, System.Collections.Generic.IEnumerable<string!>! symbols) -> Alpaca.Markets.IAlpacaDataSubscription<Alpaca.Markets.IStatus!>!
static Alpaca.Markets.Extensions.AlpacaDataStreamingClientExtensions.WithReconnect(this Alpaca.Markets.IAlpacaDataStreamingClient! client) -> Alpaca.Markets.IAlpacaDataStreamingClient!
static Alpaca.Markets.Extensions.AlpacaDataStreamingClientExtensions.WithReconnect(this Alpaca.Markets.IAlpacaDataStreamingClient! client, Alpaca.Markets.Extensions.ReconnectionParameters! parameters) -> Alpaca.Markets.IAlpacaDataStreamingClient!
static Alpaca.Markets.Extensions.AlpacaDataStreamingClientExtensions.SubscribeCancellationAsync(this Alpaca.Markets.IAlpacaDataStreamingClient! client, params string![]! symbols) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.ITrade!>!>
static Alpaca.Markets.Extensions.AlpacaDataStreamingClientExtensions.SubscribeCancellationAsync(this Alpaca.Markets.IAlpacaDataStreamingClient! client, string! symbol) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.ITrade!>!>
static Alpaca.Markets.Extensions.AlpacaDataStreamingClientExtensions.SubscribeCancellationAsync(this Alpaca.Markets.IAlpacaDataStreamingClient! client, System.Collections.Generic.IEnumerable<string!>! symbols) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.ITrade!>!>
static Alpaca.Markets.Extensions.AlpacaDataStreamingClientExtensions.SubscribeCorrectionAsync(this Alpaca.Markets.IAlpacaDataStreamingClient! client, params string![]! symbols) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.ICorrection!>!>
static Alpaca.Markets.Extensions.AlpacaDataStreamingClientExtensions.SubscribeCorrectionAsync(this Alpaca.Markets.IAlpacaDataStreamingClient! client, string! symbol) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.ICorrection!>!>
static Alpaca.Markets.Extensions.AlpacaDataStreamingClientExtensions.SubscribeCorrectionAsync(this Alpaca.Markets.IAlpacaDataStreamingClient! client, System.Collections.Generic.IEnumerable<string!>! symbols) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.ICorrection!>!>
static Alpaca.Markets.Extensions.AlpacaDataStreamingClientExtensions.SubscribeLimitUpLimitDownAsync(this Alpaca.Markets.IAlpacaDataStreamingClient! client, params string![]! symbols) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.ILimitUpLimitDown!>!>
static Alpaca.Markets.Extensions.AlpacaDataStreamingClientExtensions.SubscribeLimitUpLimitDownAsync(this Alpaca.Markets.IAlpacaDataStreamingClient! client, string! symbol) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.ILimitUpLimitDown!>!>
static Alpaca.Markets.Extensions.AlpacaDataStreamingClientExtensions.SubscribeLimitUpLimitDownAsync(this Alpaca.Markets.IAlpacaDataStreamingClient! client, System.Collections.Generic.IEnumerable<string!>! symbols) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.ILimitUpLimitDown!>!>
static Alpaca.Markets.Extensions.AlpacaDataStreamingClientExtensions.SubscribeStatusAsync(this Alpaca.Markets.IAlpacaDataStreamingClient! client, params string![]! symbols) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.IStatus!>!>
static Alpaca.Markets.Extensions.AlpacaDataStreamingClientExtensions.SubscribeStatusAsync(this Alpaca.Markets.IAlpacaDataStreamingClient! client, string! symbol) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.IStatus!>!>
static Alpaca.Markets.Extensions.AlpacaDataStreamingClientExtensions.SubscribeStatusAsync(this Alpaca.Markets.IAlpacaDataStreamingClient! client, System.Collections.Generic.IEnumerable<string!>! symbols) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.IStatus!>!>
static Alpaca.Markets.Extensions.AlpacaDataSubscriptionExtensions.AsAsyncEnumerable<TItem>(this Alpaca.Markets.IAlpacaDataSubscription<TItem>! subscription) -> System.Collections.Generic.IAsyncEnumerable<TItem>!
static Alpaca.Markets.Extensions.AlpacaDataSubscriptionExtensions.AsAsyncEnumerable<TItem>(this Alpaca.Markets.IAlpacaDataSubscription<TItem>! subscription, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<TItem>!
static Alpaca.Markets.Extensions.AlpacaNewsStreamingClientExtensions.GetNewsSubscription(this Alpaca.Markets.IAlpacaNewsStreamingClient! client, params string![]! symbols) -> Alpaca.Markets.IAlpacaDataSubscription<Alpaca.Markets.INewsArticle!>!
static Alpaca.Markets.Extensions.AlpacaNewsStreamingClientExtensions.GetNewsSubscription(this Alpaca.Markets.IAlpacaNewsStreamingClient! client, System.Collections.Generic.IEnumerable<string!>! symbols) -> Alpaca.Markets.IAlpacaDataSubscription<Alpaca.Markets.INewsArticle!>!
static Alpaca.Markets.Extensions.AlpacaNewsStreamingClientExtensions.SubscribeNewsAsync(this Alpaca.Markets.IAlpacaNewsStreamingClient! client, params string![]! symbols) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.INewsArticle!>!>
static Alpaca.Markets.Extensions.AlpacaNewsStreamingClientExtensions.SubscribeNewsAsync(this Alpaca.Markets.IAlpacaNewsStreamingClient! client, string! symbol) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.INewsArticle!>!>
static Alpaca.Markets.Extensions.AlpacaNewsStreamingClientExtensions.SubscribeNewsAsync(this Alpaca.Markets.IAlpacaNewsStreamingClient! client, System.Collections.Generic.IEnumerable<string!>! symbols) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.INewsArticle!>!>
static Alpaca.Markets.Extensions.AlpacaNewsStreamingClientExtensions.WithReconnect(this Alpaca.Markets.IAlpacaNewsStreamingClient! client) -> Alpaca.Markets.IAlpacaNewsStreamingClient!
static Alpaca.Markets.Extensions.AlpacaNewsStreamingClientExtensions.WithReconnect(this Alpaca.Markets.IAlpacaNewsStreamingClient! client, Alpaca.Markets.Extensions.ReconnectionParameters! parameters) -> Alpaca.Markets.IAlpacaNewsStreamingClient!
static Alpaca.Markets.Extensions.AlpacaTradingClientExtensions.GetCalendarForSingleDayAsync(this Alpaca.Markets.IAlpacaTradingClient! client, System.DateOnly date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Alpaca.Markets.IIntervalCalendar?>!
static Alpaca.Markets.Extensions.AlpacaTradingClientExtensions.GetCalendarForSingleDayAsync(this Alpaca.Markets.IAlpacaTradingClient! client, System.DateTime date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Alpaca.Markets.ICalendar?>!
static Alpaca.Markets.Extensions.AlpacaTradingClientExtensions.GetClockCachedAsync(this Alpaca.Markets.IAlpacaTradingClient! client) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.IClock!>
static Alpaca.Markets.Extensions.AlpacaTradingClientExtensions.GetClockCachedAsync(this Alpaca.Markets.IAlpacaTradingClient! client, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.IClock!>
static Alpaca.Markets.Extensions.AlpacaTradingClientExtensions.IsMarketOpenAsync(this Alpaca.Markets.IAlpacaTradingClient! client) -> System.Threading.Tasks.ValueTask<bool>
static Alpaca.Markets.Extensions.AlpacaTradingClientExtensions.IsMarketOpenAsync(this Alpaca.Markets.IAlpacaTradingClient! client, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<bool>
static Alpaca.Markets.Extensions.AlpacaTradingClientExtensions.ListAccountActivitiesAsAsyncEnumerable(this Alpaca.Markets.IAlpacaTradingClient! client, Alpaca.Markets.AccountActivitiesRequest! request) -> System.Collections.Generic.IAsyncEnumerable<Alpaca.Markets.IAccountActivity!>!
static Alpaca.Markets.Extensions.AlpacaTradingClientExtensions.ListAccountActivitiesAsAsyncEnumerable(this Alpaca.Markets.IAlpacaTradingClient! client, Alpaca.Markets.AccountActivitiesRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<Alpaca.Markets.IAccountActivity!>!
static Alpaca.Markets.Extensions.AlpacaServiceCollectionExtensions.AddAlpacaCryptoDataClient(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Alpaca.Markets.AlpacaCryptoDataClientConfiguration! configuration) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Alpaca.Markets.Extensions.AlpacaServiceCollectionExtensions.AddAlpacaCryptoDataClient(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Alpaca.Markets.IEnvironment! environment, Alpaca.Markets.SecurityKey! securityKey) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Alpaca.Markets.Extensions.AlpacaServiceCollectionExtensions.AddAlpacaDataClient(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Alpaca.Markets.AlpacaDataClientConfiguration! configuration) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Alpaca.Markets.Extensions.AlpacaServiceCollectionExtensions.AddAlpacaDataClient(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Alpaca.Markets.IEnvironment! environment, Alpaca.Markets.SecurityKey! securityKey) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Alpaca.Markets.Extensions.AlpacaServiceCollectionExtensions.AddAlpacaTradingClient(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Alpaca.Markets.AlpacaTradingClientConfiguration! configuration) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Alpaca.Markets.Extensions.AlpacaServiceCollectionExtensions.AddAlpacaTradingClient(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Alpaca.Markets.IEnvironment! environment, Alpaca.Markets.SecurityKey! securityKey) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Alpaca.Markets.Extensions.AlpacaStreamingClientExtensions.WithReconnect(this Alpaca.Markets.IAlpacaStreamingClient! client) -> Alpaca.Markets.IAlpacaStreamingClient!
static Alpaca.Markets.Extensions.AlpacaStreamingClientExtensions.WithReconnect(this Alpaca.Markets.IAlpacaStreamingClient! client, Alpaca.Markets.Extensions.ReconnectionParameters! parameters) -> Alpaca.Markets.IAlpacaStreamingClient!
static Alpaca.Markets.Extensions.Bracket.Buy(string! symbol, Alpaca.Markets.OrderQuantity quantity, decimal takeProfitLimitPrice, decimal stopLossStopPrice) -> Alpaca.Markets.BracketOrder!
static Alpaca.Markets.Extensions.Bracket.Buy(string! symbol, Alpaca.Markets.OrderQuantity quantity, decimal takeProfitLimitPrice, decimal stopLossStopPrice, decimal stopLossLimitPrice) -> Alpaca.Markets.BracketOrder!
static Alpaca.Markets.Extensions.Bracket.Sell(string! symbol, Alpaca.Markets.OrderQuantity quantity, decimal takeProfitLimitPrice, decimal stopLossStopPrice) -> Alpaca.Markets.BracketOrder!
static Alpaca.Markets.Extensions.Bracket.Sell(string! symbol, Alpaca.Markets.OrderQuantity quantity, decimal takeProfitLimitPrice, decimal stopLossStopPrice, decimal stopLossLimitPrice) -> Alpaca.Markets.BracketOrder!
static Alpaca.Markets.Extensions.CalendarExtensions.AsExclusiveTimeIntervalUtc(this Alpaca.Markets.ICalendar! calendar) -> Alpaca.Markets.IExclusiveTimeInterval!
static Alpaca.Markets.Extensions.CalendarExtensions.AsInclusiveTimeIntervalUtc(this Alpaca.Markets.ICalendar! calendar) -> Alpaca.Markets.IInclusiveTimeInterval!
static Alpaca.Markets.Extensions.CalendarExtensions.AsIntervalUtc(this Alpaca.Markets.ICalendar! calendar) -> Alpaca.Markets.Interval<System.DateTime>
static Alpaca.Markets.Extensions.EnumerableExtensions.GetAverageDailyTradeVolume(this System.Collections.Generic.IEnumerable<Alpaca.Markets.IBar!>! bars) -> (decimal, uint)
static Alpaca.Markets.Extensions.EnumerableExtensions.GetAverageDailyTradeVolumeAsync(this System.Collections.Generic.IAsyncEnumerable<Alpaca.Markets.IBar!>! bars) -> System.Threading.Tasks.Task<(decimal, uint)>!
static Alpaca.Markets.Extensions.EnumerableExtensions.GetAverageDailyTradeVolumeAsync(this System.Collections.Generic.IAsyncEnumerable<Alpaca.Markets.IBar!>! bars, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<(decimal, uint)>!
static Alpaca.Markets.Extensions.EnumerableExtensions.GetSimpleMovingAverage(this System.Collections.Generic.IEnumerable<Alpaca.Markets.IBar!>! bars, int window) -> System.Collections.Generic.IEnumerable<Alpaca.Markets.IBar!>!
static Alpaca.Markets.Extensions.EnumerableExtensions.GetSimpleMovingAverageAsync(this System.Collections.Generic.IAsyncEnumerable<Alpaca.Markets.IBar!>! bars, int window) -> System.Collections.Generic.IAsyncEnumerable<Alpaca.Markets.IBar!>!
static Alpaca.Markets.Extensions.EnumerableExtensions.GetSimpleMovingAverageAsync(this System.Collections.Generic.IAsyncEnumerable<Alpaca.Markets.IBar!>! bars, int window, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<Alpaca.Markets.IBar!>!
static Alpaca.Markets.Extensions.EnvironmentExtensions.WithProxyForAlpacaDataStreamingClient(this Alpaca.Markets.IEnvironment! environment) -> Alpaca.Markets.IEnvironment!
static Alpaca.Markets.Extensions.EnvironmentExtensions.WithProxyForAlpacaDataStreamingClient(this Alpaca.Markets.IEnvironment! environment, System.Uri! alpacaProxyAgentUrl) -> Alpaca.Markets.IEnvironment!
static Alpaca.Markets.Extensions.HistoricalBarsClientExtensions.GetAverageDailyTradeVolumeAsync<TRequest>(this Alpaca.Markets.IHistoricalBarsClient<TRequest!>! client, string! symbol, Alpaca.Markets.IInclusiveTimeInterval! timeInterval) -> System.Threading.Tasks.Task<(decimal, uint)>!
static Alpaca.Markets.Extensions.HistoricalBarsClientExtensions.GetAverageDailyTradeVolumeAsync<TRequest>(this Alpaca.Markets.IHistoricalBarsClient<TRequest!>! client, string! symbol, Alpaca.Markets.IInclusiveTimeInterval! timeInterval, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<(decimal, uint)>!
static Alpaca.Markets.Extensions.HistoricalBarsClientExtensions.GetAverageDailyTradeVolumeAsync<TRequest>(this Alpaca.Markets.IHistoricalBarsClient<TRequest!>! client, string! symbol, Alpaca.Markets.Interval<System.DateOnly> timeInterval) -> System.Threading.Tasks.Task<(decimal, uint)>!
static Alpaca.Markets.Extensions.HistoricalBarsClientExtensions.GetAverageDailyTradeVolumeAsync<TRequest>(this Alpaca.Markets.IHistoricalBarsClient<TRequest!>! client, string! symbol, Alpaca.Markets.Interval<System.DateOnly> timeInterval, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<(decimal, uint)>!
static Alpaca.Markets.Extensions.HistoricalBarsClientExtensions.GetAverageDailyTradeVolumeAsync<TRequest>(this Alpaca.Markets.IHistoricalBarsClient<TRequest!>! client, string! symbol, System.DateOnly from, System.DateOnly into) -> System.Threading.Tasks.Task<(decimal, uint)>!
static Alpaca.Markets.Extensions.HistoricalBarsClientExtensions.GetAverageDailyTradeVolumeAsync<TRequest>(this Alpaca.Markets.IHistoricalBarsClient<TRequest!>! client, string! symbol, System.DateOnly from, System.DateOnly into, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<(decimal, uint)>!
static Alpaca.Markets.Extensions.HistoricalBarsClientExtensions.GetAverageDailyTradeVolumeAsync<TRequest>(this Alpaca.Markets.IHistoricalBarsClient<TRequest!>! client, string! symbol, System.DateTime from, System.DateTime into) -> System.Threading.Tasks.Task<(decimal, uint)>!
static Alpaca.Markets.Extensions.HistoricalBarsClientExtensions.GetAverageDailyTradeVolumeAsync<TRequest>(this Alpaca.Markets.IHistoricalBarsClient<TRequest!>! client, string! symbol, System.DateTime from, System.DateTime into, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<(decimal, uint)>!
static Alpaca.Markets.Extensions.HistoricalBarsClientExtensions.GetHistoricalBarsAsAsyncEnumerable<TRequest>(this Alpaca.Markets.IHistoricalBarsClient<TRequest!>! client, TRequest! request) -> System.Collections.Generic.IAsyncEnumerable<Alpaca.Markets.IBar!>!
static Alpaca.Markets.Extensions.HistoricalBarsClientExtensions.GetHistoricalBarsAsAsyncEnumerable<TRequest>(this Alpaca.Markets.IHistoricalBarsClient<TRequest!>! client, TRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<Alpaca.Markets.IBar!>!
static Alpaca.Markets.Extensions.HistoricalBarsClientExtensions.GetHistoricalBarsDictionaryOfAsyncEnumerable<TRequest>(this Alpaca.Markets.IHistoricalBarsClient<TRequest!>! client, TRequest! request) -> System.Collections.Generic.IReadOnlyDictionary<string!, System.Collections.Generic.IAsyncEnumerable<Alpaca.Markets.IBar!>!>!
static Alpaca.Markets.Extensions.HistoricalBarsClientExtensions.GetHistoricalBarsDictionaryOfAsyncEnumerable<TRequest>(this Alpaca.Markets.IHistoricalBarsClient<TRequest!>! client, TRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IReadOnlyDictionary<string!, System.Collections.Generic.IAsyncEnumerable<Alpaca.Markets.IBar!>!>!
static Alpaca.Markets.Extensions.HistoricalBarsClientExtensions.GetHistoricalBarsMultiPagesAsAsyncEnumerable<TRequest>(this Alpaca.Markets.IHistoricalBarsClient<TRequest!>! client, TRequest! request) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyDictionary<string!, System.Collections.Generic.IReadOnlyList<Alpaca.Markets.IBar!>!>!>!
static Alpaca.Markets.Extensions.HistoricalBarsClientExtensions.GetHistoricalBarsMultiPagesAsAsyncEnumerable<TRequest>(this Alpaca.Markets.IHistoricalBarsClient<TRequest!>! client, TRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyDictionary<string!, System.Collections.Generic.IReadOnlyList<Alpaca.Markets.IBar!>!>!>!
static Alpaca.Markets.Extensions.HistoricalBarsClientExtensions.GetHistoricalBarsPagesAsAsyncEnumerable<TRequest>(this Alpaca.Markets.IHistoricalBarsClient<TRequest!>! client, TRequest! request) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyList<Alpaca.Markets.IBar!>!>!
static Alpaca.Markets.Extensions.HistoricalBarsClientExtensions.GetHistoricalBarsPagesAsAsyncEnumerable<TRequest>(this Alpaca.Markets.IHistoricalBarsClient<TRequest!>! client, TRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyList<Alpaca.Markets.IBar!>!>!
static Alpaca.Markets.Extensions.HistoricalBarsClientExtensions.GetSimpleMovingAverageAsync<TRequest>(this Alpaca.Markets.IHistoricalBarsClient<TRequest!>! client, TRequest! request, int window) -> System.Collections.Generic.IAsyncEnumerable<Alpaca.Markets.IBar!>!
static Alpaca.Markets.Extensions.HistoricalBarsClientExtensions.GetSimpleMovingAverageAsync<TRequest>(this Alpaca.Markets.IHistoricalBarsClient<TRequest!>! client, TRequest! request, int window, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<Alpaca.Markets.IBar!>!
static Alpaca.Markets.Extensions.HistoricalQuotesClientExtensions.GetHistoricalQuotesAsAsyncEnumerable<TRequest>(this Alpaca.Markets.IHistoricalQuotesClient<TRequest!>! client, TRequest! request) -> System.Collections.Generic.IAsyncEnumerable<Alpaca.Markets.IQuote!>!
static Alpaca.Markets.Extensions.HistoricalQuotesClientExtensions.GetHistoricalQuotesAsAsyncEnumerable<TRequest>(this Alpaca.Markets.IHistoricalQuotesClient<TRequest!>! client, TRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<Alpaca.Markets.IQuote!>!
static Alpaca.Markets.Extensions.HistoricalQuotesClientExtensions.GetHistoricalQuotesDictionaryOfAsyncEnumerable<TRequest>(this Alpaca.Markets.IHistoricalQuotesClient<TRequest!>! client, TRequest! request) -> System.Collections.Generic.IReadOnlyDictionary<string!, System.Collections.Generic.IAsyncEnumerable<Alpaca.Markets.IQuote!>!>!
static Alpaca.Markets.Extensions.HistoricalQuotesClientExtensions.GetHistoricalQuotesDictionaryOfAsyncEnumerable<TRequest>(this Alpaca.Markets.IHistoricalQuotesClient<TRequest!>! client, TRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IReadOnlyDictionary<string!, System.Collections.Generic.IAsyncEnumerable<Alpaca.Markets.IQuote!>!>!
static Alpaca.Markets.Extensions.HistoricalQuotesClientExtensions.GetHistoricalQuotesMultiPagesAsAsyncEnumerable<TRequest>(this Alpaca.Markets.IHistoricalQuotesClient<TRequest!>! client, TRequest! request) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyDictionary<string!, System.Collections.Generic.IReadOnlyList<Alpaca.Markets.IQuote!>!>!>!
static Alpaca.Markets.Extensions.HistoricalQuotesClientExtensions.GetHistoricalQuotesMultiPagesAsAsyncEnumerable<TRequest>(this Alpaca.Markets.IHistoricalQuotesClient<TRequest!>! client, TRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyDictionary<string!, System.Collections.Generic.IReadOnlyList<Alpaca.Markets.IQuote!>!>!>!
static Alpaca.Markets.Extensions.HistoricalQuotesClientExtensions.GetHistoricalQuotesPagesAsAsyncEnumerable<TRequest>(this Alpaca.Markets.IHistoricalQuotesClient<TRequest!>! client, TRequest! request) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyList<Alpaca.Markets.IQuote!>!>!
static Alpaca.Markets.Extensions.HistoricalQuotesClientExtensions.GetHistoricalQuotesPagesAsAsyncEnumerable<TRequest>(this Alpaca.Markets.IHistoricalQuotesClient<TRequest!>! client, TRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyList<Alpaca.Markets.IQuote!>!>!
static Alpaca.Markets.Extensions.HistoricalTradesClientExtensions.GetHistoricalTradesAsAsyncEnumerable<TRequest>(this Alpaca.Markets.IHistoricalTradesClient<TRequest!>! client, TRequest! request) -> System.Collections.Generic.IAsyncEnumerable<Alpaca.Markets.ITrade!>!
static Alpaca.Markets.Extensions.HistoricalTradesClientExtensions.GetHistoricalTradesAsAsyncEnumerable<TRequest>(this Alpaca.Markets.IHistoricalTradesClient<TRequest!>! client, TRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<Alpaca.Markets.ITrade!>!
static Alpaca.Markets.Extensions.HistoricalTradesClientExtensions.GetHistoricalTradesDictionaryOfAsyncEnumerable<TRequest>(this Alpaca.Markets.IHistoricalTradesClient<TRequest!>! client, TRequest! request) -> System.Collections.Generic.IReadOnlyDictionary<string!, System.Collections.Generic.IAsyncEnumerable<Alpaca.Markets.ITrade!>!>!
static Alpaca.Markets.Extensions.HistoricalTradesClientExtensions.GetHistoricalTradesDictionaryOfAsyncEnumerable<TRequest>(this Alpaca.Markets.IHistoricalTradesClient<TRequest!>! client, TRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IReadOnlyDictionary<string!, System.Collections.Generic.IAsyncEnumerable<Alpaca.Markets.ITrade!>!>!
static Alpaca.Markets.Extensions.HistoricalTradesClientExtensions.GetHistoricalTradesMultiPagesAsAsyncEnumerable<TRequest>(this Alpaca.Markets.IHistoricalTradesClient<TRequest!>! client, TRequest! request) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyDictionary<string!, System.Collections.Generic.IReadOnlyList<Alpaca.Markets.ITrade!>!>!>!
static Alpaca.Markets.Extensions.HistoricalTradesClientExtensions.GetHistoricalTradesMultiPagesAsAsyncEnumerable<TRequest>(this Alpaca.Markets.IHistoricalTradesClient<TRequest!>! client, TRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyDictionary<string!, System.Collections.Generic.IReadOnlyList<Alpaca.Markets.ITrade!>!>!>!
static Alpaca.Markets.Extensions.HistoricalTradesClientExtensions.GetHistoricalTradesPagesAsAsyncEnumerable<TRequest>(this Alpaca.Markets.IHistoricalTradesClient<TRequest!>! client, TRequest! request) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyList<Alpaca.Markets.ITrade!>!>!
static Alpaca.Markets.Extensions.HistoricalTradesClientExtensions.GetHistoricalTradesPagesAsAsyncEnumerable<TRequest>(this Alpaca.Markets.IHistoricalTradesClient<TRequest!>! client, TRequest! request, System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IReadOnlyList<Alpaca.Markets.ITrade!>!>!
static Alpaca.Markets.Extensions.OrderSideExtensions.Bracket(this Alpaca.Markets.OrderSide orderSide, string! symbol, Alpaca.Markets.OrderQuantity quantity, decimal takeProfitLimitPrice, decimal stopLossStopPrice) -> Alpaca.Markets.BracketOrder!
static Alpaca.Markets.Extensions.OrderSideExtensions.Bracket(this Alpaca.Markets.OrderSide orderSide, string! symbol, Alpaca.Markets.OrderQuantity quantity, decimal takeProfitLimitPrice, decimal stopLossStopPrice, decimal stopLossLimitPrice) -> Alpaca.Markets.BracketOrder!
static Alpaca.Markets.Extensions.ReconnectionParameters.Default.get -> Alpaca.Markets.Extensions.ReconnectionParameters!
static Alpaca.Markets.Extensions.StreamingClientExtensions.GetDailyBarSubscription(this Alpaca.Markets.IStreamingDataClient! client, params string![]! symbols) -> Alpaca.Markets.IAlpacaDataSubscription<Alpaca.Markets.IBar!>!
static Alpaca.Markets.Extensions.StreamingClientExtensions.GetDailyBarSubscription(this Alpaca.Markets.IStreamingDataClient! client, System.Collections.Generic.IEnumerable<string!>! symbols) -> Alpaca.Markets.IAlpacaDataSubscription<Alpaca.Markets.IBar!>!
static Alpaca.Markets.Extensions.StreamingClientExtensions.GetMinuteBarSubscription(this Alpaca.Markets.IStreamingDataClient! client, params string![]! symbols) -> Alpaca.Markets.IAlpacaDataSubscription<Alpaca.Markets.IBar!>!
static Alpaca.Markets.Extensions.StreamingClientExtensions.GetMinuteBarSubscription(this Alpaca.Markets.IStreamingDataClient! client, System.Collections.Generic.IEnumerable<string!>! symbols) -> Alpaca.Markets.IAlpacaDataSubscription<Alpaca.Markets.IBar!>!
static Alpaca.Markets.Extensions.StreamingClientExtensions.GetQuoteSubscription(this Alpaca.Markets.IStreamingDataClient! client, params string![]! symbols) -> Alpaca.Markets.IAlpacaDataSubscription<Alpaca.Markets.IQuote!>!
static Alpaca.Markets.Extensions.StreamingClientExtensions.GetQuoteSubscription(this Alpaca.Markets.IStreamingDataClient! client, System.Collections.Generic.IEnumerable<string!>! symbols) -> Alpaca.Markets.IAlpacaDataSubscription<Alpaca.Markets.IQuote!>!
static Alpaca.Markets.Extensions.StreamingClientExtensions.GetTradeSubscription(this Alpaca.Markets.IStreamingDataClient! client, params string![]! symbols) -> Alpaca.Markets.IAlpacaDataSubscription<Alpaca.Markets.ITrade!>!
static Alpaca.Markets.Extensions.StreamingClientExtensions.GetTradeSubscription(this Alpaca.Markets.IStreamingDataClient! client, System.Collections.Generic.IEnumerable<string!>! symbols) -> Alpaca.Markets.IAlpacaDataSubscription<Alpaca.Markets.ITrade!>!
static Alpaca.Markets.Extensions.StreamingClientExtensions.GetUpdatedBarSubscription(this Alpaca.Markets.IStreamingDataClient! client, params string![]! symbols) -> Alpaca.Markets.IAlpacaDataSubscription<Alpaca.Markets.IBar!>!
static Alpaca.Markets.Extensions.StreamingClientExtensions.GetUpdatedBarSubscription(this Alpaca.Markets.IStreamingDataClient! client, System.Collections.Generic.IEnumerable<string!>! symbols) -> Alpaca.Markets.IAlpacaDataSubscription<Alpaca.Markets.IBar!>!
static Alpaca.Markets.Extensions.StreamingClientExtensions.SubscribeDailyBarAsync(this Alpaca.Markets.IStreamingDataClient! client, params string![]! symbols) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.IBar!>!>
static Alpaca.Markets.Extensions.StreamingClientExtensions.SubscribeDailyBarAsync(this Alpaca.Markets.IStreamingDataClient! client, string! symbol) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.IBar!>!>
static Alpaca.Markets.Extensions.StreamingClientExtensions.SubscribeDailyBarAsync(this Alpaca.Markets.IStreamingDataClient! client, System.Collections.Generic.IEnumerable<string!>! symbols) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.IBar!>!>
static Alpaca.Markets.Extensions.StreamingClientExtensions.SubscribeMinuteBarAsync(this Alpaca.Markets.IStreamingDataClient! client, params string![]! symbols) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.IBar!>!>
static Alpaca.Markets.Extensions.StreamingClientExtensions.SubscribeMinuteBarAsync(this Alpaca.Markets.IStreamingDataClient! client, string! symbol) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.IBar!>!>
static Alpaca.Markets.Extensions.StreamingClientExtensions.SubscribeMinuteBarAsync(this Alpaca.Markets.IStreamingDataClient! client, System.Collections.Generic.IEnumerable<string!>! symbols) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.IBar!>!>
static Alpaca.Markets.Extensions.StreamingClientExtensions.SubscribeQuoteAsync(this Alpaca.Markets.IStreamingDataClient! client, params string![]! symbols) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.IQuote!>!>
static Alpaca.Markets.Extensions.StreamingClientExtensions.SubscribeQuoteAsync(this Alpaca.Markets.IStreamingDataClient! client, string! symbol) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.IQuote!>!>
static Alpaca.Markets.Extensions.StreamingClientExtensions.SubscribeQuoteAsync(this Alpaca.Markets.IStreamingDataClient! client, System.Collections.Generic.IEnumerable<string!>! symbols) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.IQuote!>!>
static Alpaca.Markets.Extensions.StreamingClientExtensions.SubscribeTradeAsync(this Alpaca.Markets.IStreamingDataClient! client, params string![]! symbols) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.ITrade!>!>
static Alpaca.Markets.Extensions.StreamingClientExtensions.SubscribeTradeAsync(this Alpaca.Markets.IStreamingDataClient! client, string! symbol) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.ITrade!>!>
static Alpaca.Markets.Extensions.StreamingClientExtensions.SubscribeTradeAsync(this Alpaca.Markets.IStreamingDataClient! client, System.Collections.Generic.IEnumerable<string!>! symbols) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.ITrade!>!>
static Alpaca.Markets.Extensions.StreamingClientExtensions.SubscribeUpdatedBarAsync(this Alpaca.Markets.IStreamingDataClient! client, params string![]! symbols) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.IBar!>!>
static Alpaca.Markets.Extensions.StreamingClientExtensions.SubscribeUpdatedBarAsync(this Alpaca.Markets.IStreamingDataClient! client, string! symbol) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.IBar!>!>
static Alpaca.Markets.Extensions.StreamingClientExtensions.SubscribeUpdatedBarAsync(this Alpaca.Markets.IStreamingDataClient! client, System.Collections.Generic.IEnumerable<string!>! symbols) -> System.Threading.Tasks.ValueTask<Alpaca.Markets.Extensions.IDisposableAlpacaDataSubscription<Alpaca.Markets.IBar!>!>
static Alpaca.Markets.Extensions.StreamingDataClientExtensions.SubscribeAsync(this Alpaca.Markets.IStreamingDataClient! client, params Alpaca.Markets.IAlpacaDataSubscription![]! subscriptions) -> Alpaca.Markets.Extensions.AlpacaValueTask
static Alpaca.Markets.Extensions.StreamingDataClientExtensions.UnsubscribeAsync(this Alpaca.Markets.IStreamingDataClient! client, params Alpaca.Markets.IAlpacaDataSubscription![]! subscriptions) -> Alpaca.Markets.Extensions.AlpacaValueTask
